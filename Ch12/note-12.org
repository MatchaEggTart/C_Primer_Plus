存储类别、链接和内存管理
* 
* 存储类别
**** C提供多种不同类型或storage class(存储类别)在内存中储存数据。
****
*** object
**** 被储存的每个值都占用一定物理内存，这样的一块内存称为对象(object).
**** 
*** identifier
**** 标识符，用来designate(指定)特定对象的内容，程序指定到内存中对象的方式。
**** ex: int entity = 3;
***** entity是identifier，还提供了储存在对象中的值。
**** 可以是左值都能指定对象，不是标识符也可以指定对象，比如 *pt，因为表达式也可以是左值
**** 
** storage duration
**** 存储期：用来描述对象在内存保留多长时间。
**** 
** scope
**** 作用域：用来描述程序中可访问标识符的区域。
**** 分为：块作用域、函数作用域、函数原型作用域、文件作用域。
**** block scope
***** {} 早期块的范围，C99后
***** for (int i = 0; i < 10; i++)
*****     printf ("%d\n", i);
***** 这个也是块，程序离开这个循环后i就无法访问了
**** 
**** function scope
***** 仅仅用于goto语句的标签，作用域也延伸至整个函数
**** 
**** funciton prototype scope
***** int mighty(int mouse, double large);
***** 形参名，作用域范围是从形参定义——原型声明结束。编译器只关心形参类型，不关系形参名
***** 只有变长数组，形参名才重要 void use_a_VLA(int n, int m, ar[n][m]);
**** 
**** file scope
***** 具有文件作用域的变量都是global variable(全局变量)
**** 
*** 
** 链接
**** 只有file scope的变量才有分链接，外部链接，内部链接
**** 内部链接 => 文件作用域
***** 翻译单元：一个源代码文件和他所包含的头文件，内部链接只能在一个翻译单元使用
**** 外部链接 => 全局作用域、程序作用域
***** 多个文件程序中使用
**** 
*** 
** 存储器
**** 四种存储期
**** 
**** 静态存储期
***** static声明的文件作用域变量都具有静态存储期，在程序执行期一直存在。static表明的是链接属性。
***** 所有文件作用域变量都有静态存储期。
**** 
**** 线程存储期
***** 用于并发程序，程序执行分为多个线程，从声明到县城结束都存在，_Thread_local声明对象。
**** 
**** 自动存储期
***** 块作用域的变量都自带，当离开这个块时，释放刚才为变量分配的内存，准备存放下个数据。
**** 
**** 动态分配存储期
***** 无
**** 内层块会隐藏外层块的定义，离开内层块后，外层块变量的作用域又回到原来的作用域
***** int x = 5;
***** for (int x = 0; x < 5; x++)	//这里地址都不一样
**** 
*** 
** 寄存器变量
**** register int xxxx;
***** 申请吧，看CPU给不给
**** 
** 块作用域的静态变量
**** static variable
***** 静态变量，块作用域中的静态存储变量，
***** {
*****    static int x = 1;	//离开块后，x不能用但是值能保存下来，只会编译时初始化一次
*****    x++；			//下次调用这个块的时候x!=1，是已经递增的数值
***** }
**** 
** 外部链接的静态变量
***** 外部链接的静态变量具有文件作用域、外部链接、静态存储期。
***** 如果要在其他函数内使用，其他函数要声明， 使用 extern
***** int Errup;			//声明在函数外
***** 
***** int main(void)
***** {
***** 	......
***** }
***** 
***** void next(void)
***** {
*****     extern int Errup;	//调用外部变量，如果没用使用Errup，只是一个独立局部变量
***** }
**** 
** 内部链接的静态变量
***** 在函数外使用static
**** 
* 随机数函数和静态变量
**** 魔术公式 P.391
***** 一个触发的种子数，种子数改变，得到数值就能改变
**** rand() % 6 + 1 //1-6的范围，%6求余只有0-5
**** 
*** 
* 抛骰子
** rand()、srand()、time()
**** time()需要time.h
**** rand()、srand()需要stdlib.h
**** 必须先srand()，再使用rand()
***** ex：
***** srand((unsigned int) time(0));	//种子，根据时间随机改变
***** x = rand() % 6 + 1;
**** 
*** 
* 分配内存：malloc()和free()
** malloc()
**** 返回类型是指针，分配好内存后，返回他的地址，
**** VLA跟malloc()都是动态数组(dynamic array)
***** words = (char *) malloc(SIZE * sizeof(char));
***** ptd = (char **) malloc(n * sizeof(char *));		//分配n个指向指向char指针的指针
***** ptd = (char **) malloc(sizeof(char *) * n);		//与上面一个一样
***** malloc()多出来部分是空字符
**** 
**** malloc的参数是分配内存字节数(等于分配多少个类型，可以是n个指向char的指针，那就分配n个存储指针的空间，表达式如上)
**** 
** free()
**** malloc()后必须使用free(),把空间释放，不然用以发生memory leak(内存泄漏)P.400
**** 
** EXIT_SUCCESSS
**** exit(EXIT_FAILURE);		//P.397
**** 
*** 
* ANSI C 类型限定苻
** const
** volatile
** restrict
** _Atomic
