** 边界对齐？
*** fields_source.c
**** 为什么
#+BEGIN_SRC C
struct test1 {
    int a;
    char b;
};

struct stuff {          //p.442
    int number;
    char code[3];
    double cost;
};

printf("sizeof number   is %zd\n", offsetof(struct stuff, number));
#+END_SRC

***** 出现
#+BEGIN_SRC Sh
sizeof test1  is 8
sizeof int a    is 0
sizeof char b   is 4

sizeof stuff    is 16
sizeof number   is 0
sizeof code     is 4
sizeof cost     is 8
#+END_SRC

*** 为什么会出现 0

**** 首先要知道offsetof()是什么函数，是偏移量
- 跟指针有点像
***** 段地址
- 内存里每一段的段首地址定义为『段地址』
***** 偏移地址
- 偏移地址(SA)是指段内相对于段起始地址的偏移值，例如一个存储器的大小是1KB,可以把它分为4段，第一段的地址范围就是0—255，第二段的地址范围就是256-511
- 以此类推。这些段内的偏移地址就是在0-255的范围内的。
***** 所以第一个字段(段首)的偏移量为什么是0
- 因为他就在第一个位置，没有移动
***** code[3]也是 4
- 因为根据规则3



**** 规则

***** (1)
- 结构体内部基本数据成员对齐规则：第一个数据成员放在offset为0的地方，以后每个数据成员存储的起始位置要从该成员大小的整数倍开始
- (假设int在32位机为４字节，则要从4的整数倍地址(即此时的offset要为4的整数倍）开始存储)。

***** (2)
- 结构体内部有结构体成员对齐规则：如果一个结构里有某些结构体成员，则该结构体成员要从其内部最大元素大小的整数倍地址开始存储。
- (假设struct a里存有struct b，b里有char，int，double元素，那b应该从double的字节长度(通常是8，根据编译器的不同而不同）的整数倍开始存储。)

***** (3)
- 结构体总体所占的字节大小对齐规则：结构体总体字节大小也就是sizeof的结果，必须是其内部成员中最大的对齐参数的整数倍
- (比如结构体中占字节最多的数据类型是double，那么结构体的总体大小必须是sizeof(double)的整数倍)，不足的要补齐。

***** (4)
- 成员对齐有一个重要的条件，即每个成员按自己的方式对齐。其对齐的规则是，每个成员按其类型的对齐参数
- (通常是这个类型的大小)和指定对齐参数(这里默认是8字节)中较小的一个对齐。并且结构的长度必须为所用过的所有对齐参数的整数倍，不够就补空字节
